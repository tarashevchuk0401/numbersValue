type NumberValue {
  id: ID!
  value: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelNumberValueConnection {
  items: [NumberValue]!
  nextToken: String
}

input ModelNumberValueFilterInput {
  id: ModelIDInput
  value: ModelIntInput
  and: [ModelNumberValueFilterInput]
  or: [ModelNumberValueFilterInput]
  not: ModelNumberValueFilterInput
}

type Query {
  getNumberValue(id: ID!): NumberValue
  listNumberValues(filter: ModelNumberValueFilterInput, limit: Int, nextToken: String): ModelNumberValueConnection
}

input ModelNumberValueConditionInput {
  value: ModelIntInput
  and: [ModelNumberValueConditionInput]
  or: [ModelNumberValueConditionInput]
  not: ModelNumberValueConditionInput
}

input CreateNumberValueInput {
  id: ID
  value: Int!
}

input UpdateNumberValueInput {
  id: ID!
  value: Int
}

input DeleteNumberValueInput {
  id: ID!
}

type Mutation {
  createNumberValue(input: CreateNumberValueInput!, condition: ModelNumberValueConditionInput): NumberValue
  updateNumberValue(input: UpdateNumberValueInput!, condition: ModelNumberValueConditionInput): NumberValue
  deleteNumberValue(input: DeleteNumberValueInput!, condition: ModelNumberValueConditionInput): NumberValue
}

input ModelSubscriptionNumberValueFilterInput {
  id: ModelSubscriptionIDInput
  value: ModelSubscriptionIntInput
  and: [ModelSubscriptionNumberValueFilterInput]
  or: [ModelSubscriptionNumberValueFilterInput]
}

type Subscription {
  onCreateNumberValue(filter: ModelSubscriptionNumberValueFilterInput): NumberValue @aws_subscribe(mutations: ["createNumberValue"])
  onUpdateNumberValue(filter: ModelSubscriptionNumberValueFilterInput): NumberValue @aws_subscribe(mutations: ["updateNumberValue"])
  onDeleteNumberValue(filter: ModelSubscriptionNumberValueFilterInput): NumberValue @aws_subscribe(mutations: ["deleteNumberValue"])
}
